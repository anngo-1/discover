{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Discover Documentation","text":"<p>Welcome to the Discover documentation. This documentation covers the implementation and technical details of Discover, a research analytics platform.</p>"},{"location":"#frontend-architecture","title":"Frontend Architecture","text":"<p>The frontend is built using Next.js 13+ and follows a component-based architecture. Here are some helpful links:</p> <ul> <li>Project Structure Overview</li> <li>Data Flow Patterns</li> </ul>"},{"location":"#key-components","title":"Key Components","text":""},{"location":"#core-components","title":"Core Components","text":"<ul> <li>Navigation Bar</li> <li>Filter System</li> <li>Metrics Display</li> </ul>"},{"location":"#data-visualization","title":"Data Visualization","text":"<ul> <li>Double Bar Chart</li> <li>Stacked Bar Chart</li> </ul>"},{"location":"#route-specific-components","title":"Route-Specific Components","text":"<ul> <li>Works Filter Modal</li> <li>Research Table</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Clone the repository</li> <li>Install dependencies: <code>npm install</code></li> <li>Start development server: <code>npm run dev</code></li> <li>Visit <code>http://localhost:3000</code></li> </ol>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li><code>frontend/architecture</code> - System architecture and patterns</li> <li><code>frontend/core</code> - Home page and layout for all pages</li> </ul> <p>The structure for the other pages matches the frontend directory of discover.</p>"},{"location":"frontend/app/layout/","title":"Root Layout Documentation","text":"<p><code>app/layout.tsx</code></p>"},{"location":"frontend/app/layout/#overview","title":"Overview","text":"<p>The root layout component serves as the main wrapper for the entire application, implementing the Mantine UI framework, the Navbar on each page, and necessary style configs.</p>"},{"location":"frontend/app/layout/#features","title":"Features","text":"<ul> <li>Implements Mantine Provider for global UI consistency</li> <li>Configures light color scheme</li> <li>Imports required Mantine CSS styles:</li> <li>Core styles</li> <li>Dates component styles</li> <li>Notifications styles</li> <li>Carousel styles</li> </ul>"},{"location":"frontend/app/layout/#usage","title":"Usage","text":"<p>This component is automatically used by Next.js to wrap all pages in the application. No manual implementation required.</p>"},{"location":"frontend/app/page/","title":"Home Page Documentation","text":"<p><code>app/page.tsx</code></p>"},{"location":"frontend/app/page/#overview","title":"Overview","text":"<p>The page.tsx without a directory leads to the / route. It redirects to the /works route, which will render app/works/page.tsx</p>"},{"location":"frontend/app/page/#features","title":"Features","text":"<ul> <li>Redirects using next router</li> </ul>"},{"location":"frontend/app/page/#usage","title":"Usage","text":"<ul> <li>This component could be used as a login screen in the future, which then redirects to the appropriate page for the user.</li> </ul>"},{"location":"frontend/app/routes/works/page/","title":"Works Page Documentation","text":"<p><code>app/works/page.tsx</code></p>"},{"location":"frontend/app/routes/works/page/#overview","title":"Overview","text":"<p>The main page component for the works section, displaying research works with filtering and metrics capabilities.</p>"},{"location":"frontend/app/routes/works/page/#features","title":"Features","text":"<ul> <li>Filter system</li> <li>Research metrics</li> <li>Paginated results</li> <li>Responsive layout</li> </ul>"},{"location":"frontend/app/routes/works/page/#component-structure","title":"Component Structure","text":"<pre><code>Works Page\n\u251c\u2500\u2500 Navbar\n\u251c\u2500\u2500 Container\n\u2502   \u251c\u2500\u2500 Description Text\n\u2502   \u2514\u2500\u2500 FilterWrapper\n\u2502       \u251c\u2500\u2500 Filter Component\n\u2502       \u251c\u2500\u2500 ResearchMetricsWrapper\n\u2502       \u2514\u2500\u2500 PaginationWrapper\n</code></pre>"},{"location":"frontend/app/routes/works/page/#props","title":"Props","text":"<p>Uses <code>initialFilters</code> from works presets for initial filter state.</p>"},{"location":"frontend/app/routes/works/page/#implementation","title":"Implementation","text":"<pre><code>export default function HomePage() {\n  return (\n    &lt;div&gt;\n      &lt;Navbar /&gt;\n      &lt;Container fluid px={24}&gt;\n        &lt;Space h=\"md\" /&gt;\n        &lt;Text c=\"dimmed\"&gt;\n          Works include journal articles, books, datasets, and theses.\n        &lt;/Text&gt;\n        &lt;Space h=\"md\" /&gt;\n        &lt;FilterWrapper initialFilters={initialFilters} /&gt;\n      &lt;/Container&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>\\</p>"},{"location":"frontend/app/routes/works/components/FilterModal/","title":"Filter Modal Documentation","text":"<p><code>app/works/components/FilterModal.tsx</code></p>"},{"location":"frontend/app/routes/works/components/FilterModal/#overview","title":"Overview","text":"<p>A comprehensive modal component for configuring and applying filters to research works data.</p>"},{"location":"frontend/app/routes/works/components/FilterModal/#features","title":"Features","text":"<ul> <li>Filtering capabilities</li> <li>Import/Export filter configurations</li> <li>Date range selection</li> <li>Text search</li> <li>Multi-sort functionality</li> <li>Publication type filtering</li> <li>Field/Subject filtering</li> <li>Citation count range filtering</li> <li>Open Access and DOI filtering</li> </ul>"},{"location":"frontend/app/routes/works/components/FilterModal/#props-interface","title":"Props Interface","text":"<pre><code>interface FilterModalProps {  \n  opened: boolean;                                            \n  onClose: () =&gt; void;                                          \n  onApply: (filters: WorksFilterState) =&gt; Promise&lt;void&gt;;         \n  initialFilters: WorksFilterState;                               \n  isLoading: boolean;\n}\n</code></pre>"},{"location":"frontend/app/routes/works/components/FilterModal/#key-components","title":"Key Components","text":""},{"location":"frontend/app/routes/works/components/FilterModal/#filter-options","title":"Filter Options","text":"<ul> <li>Date Range Picker</li> <li>Text Search</li> <li>Sort Configuration</li> <li>Multiple sort criteria</li> <li>Ascending/Descending toggle</li> <li>Publication Type Selection</li> <li>Field Selection/Exclusion</li> <li>Citation Count Range</li> <li>Toggle Switches for:</li> <li>Open Access</li> <li>DOI Existence</li> </ul>"},{"location":"frontend/app/routes/works/components/FilterModal/#importexport","title":"Import/Export","text":"<ul> <li>Export current filters to JSON</li> <li>Import filters from JSON file</li> <li>Validation of imported filters</li> </ul>"},{"location":"frontend/app/routes/works/components/FilterModal/#usage-example","title":"Usage Example","text":"<pre><code>&lt;FilterModal\n  opened={isModalOpen}\n  onClose={handleClose}\n  onApply={handleApply}\n  initialFilters={currentFilters}\n  isLoading={false}\n/&gt;\n</code></pre>"},{"location":"frontend/app/routes/works/components/QuickMetricsSection/","title":"Quick Metrics Section Documentation","text":"<p><code>app/works/components/QuickMetricsSection.tsx</code></p>"},{"location":"frontend/app/routes/works/components/QuickMetricsSection/#overview","title":"Overview","text":"<p>A container component that displays three QuickMetricCards in a grid layout with loading states.</p>"},{"location":"frontend/app/routes/works/components/QuickMetricsSection/#features","title":"Features","text":"<ul> <li>Responsive grid layout</li> <li>Loading state handling</li> <li>Metric display</li> <li>Automatic number formatting</li> </ul>"},{"location":"frontend/app/routes/works/components/QuickMetricsSection/#props-interface","title":"Props Interface","text":"<pre><code>interface QuickMetricsSectionProps {\n  metrics: {\n    totalPapers: number;\n    totalCitations: number;\n    averageCitations: number;\n  };\n  loading: boolean;\n}\n</code></pre>"},{"location":"frontend/app/routes/works/components/QuickMetricsSection/#default-metrics","title":"Default Metrics","text":"<ul> <li>Total Results</li> <li>Total Citations</li> <li>Average Citations</li> </ul>"},{"location":"frontend/app/routes/works/components/QuickMetricsSection/#usage-example","title":"Usage Example","text":"<pre><code>&lt;QuickMetricsSection\n  metrics={{\n    totalPapers: 1000,\n    totalCitations: 5000,\n    averageCitations: 5\n  }}\n  loading={false}\n/&gt;\n</code></pre>"},{"location":"frontend/app/routes/works/components/ResearchTable/","title":"Research Table Documentation","text":"<p><code>app/works/components/ResearchTable.tsx</code></p>"},{"location":"frontend/app/routes/works/components/ResearchTable/#overview","title":"Overview","text":"<p>A component that displays research works in a card-based layout with infinite scroll capabilities.</p>"},{"location":"frontend/app/routes/works/components/ResearchTable/#features","title":"Features","text":"<ul> <li>Card-based publication display</li> <li>Publication metadata display:</li> <li>Title with link</li> <li>Authors list</li> <li>Publication date</li> <li>Journal name</li> <li>Citation count</li> <li>DOI with link</li> </ul>"},{"location":"frontend/app/routes/works/components/ResearchTable/#interfaces","title":"Interfaces","text":"<pre><code>interface Author {\n  name: string;\n}\n\ninterface Publication {\n  id: string;\n  title: string;\n  authors: Author[] | null;\n  publication_date: string;\n  journal: string;\n  cited_by_count: number;\n  doi: string;\n}\n\ninterface ResearchTableProps {\n  publications: Publication[];    \n}\n</code></pre>"},{"location":"frontend/app/routes/works/components/ResearchTable/#child-components","title":"Child Components","text":""},{"location":"frontend/app/routes/works/components/ResearchTable/#publicationcard","title":"PublicationCard","text":"<p>A sub-component that renders individual publication entries with: - Interactive hover effects - Metadata badges - External links - Responsive layout</p>"},{"location":"frontend/app/routes/works/components/ResearchTable/#styling-features","title":"Styling Features","text":"<ul> <li>Shadow effects on hover</li> <li>Smooth transitions</li> <li>Responsive padding and spacing</li> <li>Consistent typography hierarchy</li> <li>Badge-based metadata display</li> </ul>"},{"location":"frontend/app/routes/works/components/ResearchTable/#usage-example","title":"Usage Example","text":"<pre><code>&lt;ResearchTable publications={[\n  {\n    id: \"example-id\",\n    title: \"Example Research Paper\",\n    authors: [{ name: \"John Doe\" }],\n    publication_date: \"2024-01-01\",\n    journal: \"Example Journal\",\n    cited_by_count: 10,\n    doi: \"10.1234/example\"\n  }\n]} /&gt;\n</code></pre>"},{"location":"frontend/app/routes/works/presets/works/","title":"Works Presets Documentation","text":"<p><code>app/works/presets/works.tsx</code></p>"},{"location":"frontend/app/routes/works/presets/works/#overview","title":"Overview","text":"<p>Defines preset configurations for filters and initial states in the works section.</p>"},{"location":"frontend/app/routes/works/presets/works/#features","title":"Features","text":"<ul> <li>Default filter configuration</li> <li>Predefined filter sets</li> </ul>"},{"location":"frontend/app/routes/works/presets/works/#initial-filters","title":"Initial Filters","text":"<pre><code>export const initialFilters: WorksFilterState = {\n  dateRange: { \n    from: new Date('2023-01-01'), \n    to: new Date('2024-12-31') \n  },\n  search_query: \"\",\n  type: ['article', 'preprint'],\n  fields: [],\n  excludeFields: [],\n  openAccess: false,\n  has_doi: false,\n  citationCount: {\n    min: 0,\n    max: null,\n  },\n  subject: \"works\",\n  sort: ['cited_by_count:desc', 'publication_date:desc']\n};\n</code></pre>"},{"location":"frontend/app/routes/works/presets/works/#predefined-filters","title":"Predefined Filters","text":"<p>Includes preset filters for: - Papers from 2022-2024 - Computer Science papers - Highly cited papers (10000+ citations) - Mathematics papers with 500+ citations - Recent AI/ML papers</p>"},{"location":"frontend/app/routes/works/presets/works/#usage-example","title":"Usage Example","text":"<pre><code>import { initialFilters, worksPredefinedFilters } from './works';\n\n// Using initial filters\nconst filters = { ...initialFilters };\n\n&lt;ResearchMetricsWrapper \n  filters={filters}\n/&gt;\n</code></pre>"},{"location":"frontend/app/routes/works/wrappers/FilterWrapper/","title":"Filter Wrapper Documentation","text":"<p><code>app/works/wrappers/FilterWrapper.tsx</code></p>"},{"location":"frontend/app/routes/works/wrappers/FilterWrapper/#overview","title":"Overview","text":"<p>The root wrapper component that manages filter state and coordinates between filter UI components and data display components.</p>"},{"location":"frontend/app/routes/works/wrappers/FilterWrapper/#features","title":"Features","text":"<ul> <li>Centralized filter state management</li> <li>Integration of filter modal</li> <li>Coordination of research metrics and pagination</li> <li>Predefined filter management</li> </ul>"},{"location":"frontend/app/routes/works/wrappers/FilterWrapper/#props-interface","title":"Props Interface","text":"<pre><code>interface FilterWrapperProps {\n  initialFilters: WorksFilterState;\n}\n</code></pre>"},{"location":"frontend/app/routes/works/wrappers/FilterWrapper/#component-structure","title":"Component Structure","text":"<pre><code>FilterWrapper\n\u251c\u2500\u2500 Filter (UI Component)\n\u251c\u2500\u2500 ResearchMetricsWrapper (Data Visualization)\n\u2514\u2500\u2500 PaginationWrapper (Results Display)\n</code></pre>"},{"location":"frontend/app/routes/works/wrappers/FilterWrapper/#usage-example","title":"Usage Example","text":"<pre><code>&lt;FilterWrapper \n  initialFilters={{\n    dateRange: { from: new Date(), to: new Date() },\n    search_query: \"\",\n    type: [],\n    fields: [],\n    excludeFields: [],\n    // ... other filter properties\n  }}\n/&gt;\n</code></pre>"},{"location":"frontend/app/routes/works/wrappers/PaginationWrapper/","title":"Pagination Wrapper Documentation","text":"<p><code>app/works/wrappers/PaginationWrapper.tsx</code></p>"},{"location":"frontend/app/routes/works/wrappers/PaginationWrapper/#overview","title":"Overview","text":"<p>A wrapper component that handles pagination for research works data, including fetching and displaying paginated results.</p>"},{"location":"frontend/app/routes/works/wrappers/PaginationWrapper/#features","title":"Features","text":"<ul> <li>API request to retrieve paginated research works</li> <li>Download capability (work in progress)</li> </ul>"},{"location":"frontend/app/routes/works/wrappers/PaginationWrapper/#props-interface","title":"Props Interface","text":"<pre><code>interface PaginationWrapperProps {\n  filters: WorksFilterState;\n}\n</code></pre>"},{"location":"frontend/app/routes/works/wrappers/PaginationWrapper/#api-integration","title":"API Integration","text":"<pre><code>const fetchPublications = async (page: number) =&gt; {\n  const response = await fetch(\n    `${host}/works/publications?page=${page}&amp;filter=${JSON.stringify(filters)}`\n  );\n  // Returns publications and total_pages\n}\n</code></pre>"},{"location":"frontend/app/routes/works/wrappers/PaginationWrapper/#usage-example","title":"Usage Example","text":"<pre><code>&lt;PaginationWrapper \n  filters={{\n    dateRange: { from: null, to: null },\n    search_query: \"\",\n    type: [],\n    // ... other filter properties\n  }}\n/&gt;\n</code></pre>"},{"location":"frontend/app/routes/works/wrappers/ResearchMetricsWrapper/","title":"Research Metrics Wrapper Documentation","text":"<p><code>app/works/wrappers/ResearchMetricsWrapper.tsx</code></p>"},{"location":"frontend/app/routes/works/wrappers/ResearchMetricsWrapper/#overview","title":"Overview","text":"<p>A wrapper component for the research metrics section that displays various research metrics visualizations and statistics.</p>"},{"location":"frontend/app/routes/works/wrappers/ResearchMetricsWrapper/#features","title":"Features","text":"<ul> <li>Quick metrics overview</li> <li>Publication type visualization</li> <li>Citation metrics</li> <li>Timeline analysis</li> <li>Grouping statistics</li> <li>Loading states</li> <li>Error handling</li> </ul>"},{"location":"frontend/app/routes/works/wrappers/ResearchMetricsWrapper/#props-interface","title":"Props Interface","text":"<pre><code>interface ResearchMetricsWrapperProps {\n  filters: WorksFilterState;\n}\n</code></pre>"},{"location":"frontend/app/routes/works/wrappers/ResearchMetricsWrapper/#component-sections","title":"Component Sections","text":""},{"location":"frontend/app/routes/works/wrappers/ResearchMetricsWrapper/#quick-metrics","title":"Quick Metrics","text":"<ul> <li>Total papers count</li> <li>Total citations</li> <li>Average citations per paper</li> </ul>"},{"location":"frontend/app/routes/works/wrappers/ResearchMetricsWrapper/#visualizations","title":"Visualizations","text":"<ul> <li>Publication types over time (stacked bar chart)</li> <li>Citations timeline (double bar chart)</li> <li>Metrics breakdown table</li> </ul>"},{"location":"frontend/app/routes/works/wrappers/ResearchMetricsWrapper/#metrics-categories-for-the-metricscounttable","title":"Metrics Categories (for the MetricsCountTable)","text":"<pre><code>const metricsCategories = [\n  { id: 'funders', label: 'Funders', searchable: true },\n  { id: 'publishers', label: 'Publishers', searchable: true },\n  { id: 'openAccess', label: 'Open Access', searchable: false }\n];\n</code></pre>"},{"location":"frontend/app/routes/works/wrappers/ResearchMetricsWrapper/#usage-example","title":"Usage Example","text":"<pre><code>&lt;ResearchMetricsWrapper \n  filters={{\n    dateRange: { from: new Date(), to: new Date() },\n    search_query: \"\",\n    type: [\"article\"],\n    // ... other filter properties\n  }}\n/&gt;\n</code></pre>"},{"location":"frontend/architecture/data-flow/","title":"Frontend Data Flow","text":""},{"location":"frontend/architecture/data-flow/#overview","title":"Overview","text":"<p>The application follows a pattern centered around user-driven filter interactions. </p>"},{"location":"frontend/architecture/data-flow/#flow-sequence","title":"Flow Sequence","text":""},{"location":"frontend/architecture/data-flow/#1-filter-initialization","title":"1. Filter Initialization","text":"<ul> <li>Each page loads with a predefined set of filters from its <code>presets</code> directory</li> <li>Initial filters determine the default data view presented to users</li> <li>Filter configurations are type-safe and follow interfaces defined in <code>libs/types.ts</code></li> </ul>"},{"location":"frontend/architecture/data-flow/#2-user-interaction-filter-updates","title":"2. User Interaction &amp; Filter Updates","text":"<ul> <li>Users can modify filters through the FilterModal component</li> <li>Upon clicking \"Apply Filters\":</li> <li>Filter state is updated</li> <li>Changes propagate to the respective wrapper components</li> </ul>"},{"location":"frontend/architecture/data-flow/#3-data-fetching","title":"3. Data Fetching","text":"<ul> <li>Wrapper components act as containers for data fetching logic</li> <li>They receive the updated filter state and:</li> <li>Construct appropriate API requests with the filter state as a parameter</li> <li>Transform API responses into component-ready data structures</li> </ul>"},{"location":"frontend/architecture/data-flow/#4-data-distribution","title":"4. Data Distribution","text":"<ul> <li>Wrapper components distribute fetched data to their children through props</li> <li>Child components focus on data presentation</li> <li>Props follow TypeScript interfaces to ensure type safety</li> </ul>"},{"location":"frontend/architecture/data-flow/#5-data-display","title":"5. Data Display","text":"<ul> <li>Child components render the received data using appropriate visualizations or layouts</li> </ul> <p>This architecture ensures a clear separation of concerns, predictable data flow, and the reusability of the components used.</p>"},{"location":"frontend/architecture/project-structure/","title":"Frontend Documentation","text":""},{"location":"frontend/architecture/project-structure/#project-structure","title":"Project Structure","text":"<pre><code>frontend/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 layout.tsx                 # Root layout component\n\u2502   \u251c\u2500\u2500 page.tsx                   # Home page\n\u2502   \u251c\u2500\u2500 works/                     # Works route\n\u2502   \u2502   \u251c\u2500\u2500 components/            # Route-specific components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 FilterModal.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ResearchTable.tsx\n\u2502   \u2502   \u251c\u2500\u2500 presets/              # Initialization and configurations\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 works.tsx\n\u2502   \u2502   \u251c\u2500\u2500 wrappers/             # API and data handling wrappers\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 PaginationWrapper.tsx\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ResearchMetricsWrapper.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 FilterWrapper.tsx\n\u2502   \u2502   \u2514\u2500\u2500 page.tsx               # Works page component\n\u2502   \u251c\u2500\u2500 topics/                    # Topics route (unfinished)\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 presets/\n\u2502   \u2502   \u251c\u2500\u2500 wrappers/\n\u2502   \u2502   \u2514\u2500\u2500 page.tsx\n\u2502   \u251c\u2500\u2500 researchers/               # Researchers route (unfinished)\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 presets/\n\u2502   \u2502   \u251c\u2500\u2500 wrappers/\n\u2502   \u2502   \u2514\u2500\u2500 page.tsx\n\u2502   \u251c\u2500\u2500 journals/                  # Journals route (unfinished)\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 presets/\n\u2502   \u2502   \u251c\u2500\u2500 wrappers/\n\u2502   \u2502   \u2514\u2500\u2500 page.tsx\n\u2502   \u2514\u2500\u2500 funding/                   # Funding route (unfinished)\n\u2502       \u251c\u2500\u2500 components/\n\u2502       \u251c\u2500\u2500 presets/\n\u2502       \u251c\u2500\u2500 wrappers/\n\u2502       \u2514\u2500\u2500 page.tsx\n\u251c\u2500\u2500 components/                    # Reusable components \n\u2502   \u251c\u2500\u2500 NavBar.tsx\n\u2502   \u251c\u2500\u2500 Filter.tsx\n\u2502   \u251c\u2500\u2500 MetricsCountTable.tsx\n\u2502   \u251c\u2500\u2500 QuickMetricCard.tsx\n\u2502   \u251c\u2500\u2500 QuickMetricsSection.tsx\n\u2502   \u2514\u2500\u2500 charts/\n\u2502       \u251c\u2500\u2500 DoubleBarChart.tsx\n\u2502       \u2514\u2500\u2500 StackedBarChart.tsx\n\u251c\u2500\u2500 hooks/                        # Custom hooks\n\u2502   \u2514\u2500\u2500 getWorksMetricsData.tsx\n\u2514\u2500\u2500 libs/\n    \u2514\u2500\u2500 types.ts                  # TypeScript type definitions\n</code></pre>"},{"location":"frontend/architecture/project-structure/#architecture-overview","title":"Architecture Overview","text":""},{"location":"frontend/architecture/project-structure/#routing-structure","title":"Routing Structure","text":"<p>The application follows Next.js 13+ App Router convention with five main routes:</p> <ol> <li><code>/works</code> - Research works and publications</li> <li><code>/topics</code> - Research topics and subject areas</li> <li><code>/researchers</code> - Individual researcher profiles and metrics</li> <li><code>/journals</code> - Journal information and metrics</li> <li><code>/funding</code> - Research funding and grants</li> </ol> <p>Each route follows the same organizational pattern: - <code>page.tsx</code>: The main page component - <code>components/</code>: Route-specific components - <code>presets/</code>: Initialization variables and pre-configured settings - <code>wrappers/</code>: Components that handle API calls and data fetching</p>"},{"location":"frontend/architecture/project-structure/#component-categories","title":"Component Categories","text":""},{"location":"frontend/architecture/project-structure/#reusable-components-components","title":"Reusable Components (<code>/components</code>)","text":"<p>Components in this directory can be used across multiple routes in the application. These include: - UI elements (NavBar, Filter) - Data visualization components (charts) - Metric display components (QuickMetricCard, MetricsCountTable)</p>"},{"location":"frontend/architecture/project-structure/#route-specific-components-approutecomponents","title":"Route-Specific Components (<code>/app/[route]/components</code>)","text":"<p>Components that are tightly coupled to a specific route and aren't meant to be reused elsewhere.</p>"},{"location":"frontend/architecture/project-structure/#wrapper-components-approutewrappers","title":"Wrapper Components (<code>/app/[route]/wrappers</code>)","text":"<p>Higher-order components that:</p> <ul> <li>Handle API calls</li> <li>Manage data fetching</li> <li>Provide data context to child components</li> <li>Handle pagination and filtering logic</li> </ul>"},{"location":"frontend/architecture/project-structure/#preset-configurations-approutepresets","title":"Preset Configurations (<code>/app/[route]/presets</code>)","text":"<p>Contains initialization variables and pre-configured settings specific to each route, such as:</p> <ul> <li>Default filter values</li> <li>Initial states</li> <li>Configuration objects</li> </ul>"},{"location":"frontend/components/Filter/","title":"Filter Component","text":"<p><code>components/Filter.tsx</code></p>"},{"location":"frontend/components/Filter/#overview","title":"Overview","text":"<p>A generic filter component that manages filter state and provides a carousel of filter options, including custom and predefined filters. The inputs are the intial filters, predefined filters, a function to call when filters are applied, and a filter modal that allows the user to select the filters.</p>"},{"location":"frontend/components/Filter/#props-interface","title":"Props Interface","text":"<pre><code>interface FilterProps&lt;T&gt; {\n  // Initial filter state\n  initialFilters: T;\n\n  // Array of predefined filter configurations\n  predefinedFilters: { \n    name: string; \n    filters: T; \n  }[];\n\n  // Callback function when filters are applied\n  onFiltersApplied: (newFilters: T) =&gt; Promise&lt;void&gt;; \n\n  // Modal component for filter configuration\n  FilterModalComponent: FC&lt;{\n    opened: boolean;\n    onClose: () =&gt; void;\n    onApply: (filters: T) =&gt; Promise&lt;void&gt;;\n    initialFilters: T;\n    isLoading: boolean;\n  }&gt;;\n}\n</code></pre>"},{"location":"frontend/components/Filter/#features","title":"Features","text":"<ul> <li>Generic typing for filter state</li> <li>Carousel of filter options</li> <li>Custom and predefined filters</li> <li>Async filter application</li> <li>Loading states</li> <li>Success/Error notifications</li> <li>Modal integration</li> <li>Active filter indication</li> </ul>"},{"location":"frontend/components/Filter/#usage-example","title":"Usage Example","text":"<pre><code>import Filter from '@/components/Filter';\nimport CustomFilterModal from './CustomFilterModal';\n\ninterface MyFilters {\n  dateRange: DateRange;\n  searchTerm: string;\n  // ... other filter properties\n}\n\nconst MyComponent = () =&gt; {\n  const initialFilters: MyFilters = {\n    dateRange: { start: null, end: null },\n    searchTerm: '',\n  };\n\n  const predefinedFilters = [\n    { \n      name: 'Last Month', \n      filters: { \n        dateRange: { start: lastMonth, end: today },\n        searchTerm: '' \n      } \n    },\n    // ... other predefined filters\n  ];\n\n  const handleFiltersApplied = async (filters: MyFilters) =&gt; {\n    // Handle filter application\n    await applyFilters(filters);\n  };\n\n  return (\n    &lt;Filter\n      initialFilters={initialFilters}\n      predefinedFilters={predefinedFilters}\n      onFiltersApplied={handleFiltersApplied}\n      FilterModalComponent={CustomFilterModal}\n    /&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/components/MetricsCountTable/","title":"Metrics Count Table Documentation","text":"<p><code>components/MetricsCountTable.tsx</code></p>"},{"location":"frontend/components/MetricsCountTable/#overview","title":"Overview","text":"<p>A tabbed table component that displays various metric categories with search, sorting, and percentage calculations.</p>"},{"location":"frontend/components/MetricsCountTable/#features","title":"Features","text":"<ul> <li>Tabbed interface</li> <li>Search functionality</li> <li>Percentage calculations</li> <li>Sorted display</li> <li>Responsive design</li> <li>Loading states</li> </ul>"},{"location":"frontend/components/MetricsCountTable/#interfaces","title":"Interfaces","text":"<pre><code>interface MetricData {\n  [key: string]: number;\n}\n\ninterface MetricCategory {\n  id: string;\n  label: string;\n  data: MetricData;\n  searchable?: boolean;\n}\n\ninterface MetricsCountTableProps {\n  categories: MetricCategory[];\n  isLoading?: boolean;\n  defaultActiveTab?: string;\n}\n</code></pre>"},{"location":"frontend/components/MetricsCountTable/#key-functions","title":"Key Functions","text":""},{"location":"frontend/components/MetricsCountTable/#search-and-filtering","title":"Search and Filtering","text":"<pre><code>const getFilteredMetrics = (metrics: MetricData): MetricData =&gt; {\n  return Object.entries(metrics)\n    .filter(([name]) =&gt; name.toLowerCase().includes(searchTerm.toLowerCase()))\n    .sort(([, a], [, b]) =&gt; b - a)\n    .reduce&lt;MetricData&gt;((acc, [key, value]) =&gt; ({ ...acc, [key]: value }), {});\n};\n</code></pre>"},{"location":"frontend/components/MetricsCountTable/#performance-optimizations","title":"Performance Optimizations","text":"<ul> <li>Debounced search</li> <li>Memoized calculations</li> <li>Optimized rendering</li> </ul>"},{"location":"frontend/components/MetricsCountTable/#usage-example","title":"Usage Example","text":"<pre><code>&lt;MetricsCountTable\n  categories={[\n    {\n      id: 'publishers',\n      label: 'Publishers',\n      data: { 'Publisher A': 100, 'Publisher B': 200 },\n      searchable: true\n    }\n  ]}\n  isLoading={false}\n  defaultActiveTab=\"publishers\"\n/&gt;\n</code></pre>"},{"location":"frontend/components/NavBar/","title":"Navigation Bar Documentation","text":"<p><code>components/NavBar.tsx</code></p>"},{"location":"frontend/components/NavBar/#overview","title":"Overview","text":"<p>A responsive navigation component that provides application-wide navigation with mobile support.</p>"},{"location":"frontend/components/NavBar/#features","title":"Features","text":"<ul> <li>Responsive design</li> <li>Mobile drawer navigation</li> <li>Active route highlighting</li> <li>Consistent styling</li> <li>Smooth transitions</li> </ul>"},{"location":"frontend/components/NavBar/#navigation-items","title":"Navigation Items","text":"<pre><code>const navigationItems = [\n  { label: 'Works', href: '/works' },\n  { label: 'Journals/Publishers', href: '/journals' },\n  { label: 'Researchers', href: '/researchers' },\n  { label: 'Topics', href: '/topics' },\n  { label: 'Funding', href: '/funding' }\n];\n</code></pre>"},{"location":"frontend/components/NavBar/#components","title":"Components","text":""},{"location":"frontend/components/NavBar/#desktop-navigation","title":"Desktop Navigation","text":"<ul> <li>Horizontal button layout</li> <li>Active state indication</li> <li>Consistent spacing</li> </ul>"},{"location":"frontend/components/NavBar/#mobile-navigation","title":"Mobile Navigation","text":"<ul> <li>Hamburger menu trigger</li> <li>Drawer component</li> <li>Vertical button layout</li> <li>Close button</li> </ul>"},{"location":"frontend/components/NavBar/#styling-features","title":"Styling Features","text":"<ul> <li>Sticky positioning</li> <li>Shadow effects</li> <li>Responsive breakpoints</li> <li>Transition animations</li> </ul>"},{"location":"frontend/components/NavBar/#usage-example","title":"Usage Example","text":"<pre><code>&lt;Navbar /&gt;\n</code></pre>"},{"location":"frontend/components/QuickMetricCard/","title":"Quick Metric Card Documentation","text":"<p><code>components/QuickMetricCard.tsx</code></p>"},{"location":"frontend/components/QuickMetricCard/#overview","title":"Overview","text":"<p>A simple, reusable card component for displaying individual metric statistics with title, value, and description.</p>"},{"location":"frontend/components/QuickMetricCard/#features","title":"Features","text":"<ul> <li>Clean, consistent layout</li> <li>Title and value highlighting</li> <li>Description text</li> <li>Consistent styling with Mantine theme</li> </ul>"},{"location":"frontend/components/QuickMetricCard/#props-interface","title":"Props Interface","text":"<pre><code>interface QuickMetric {\n  title: string;      // Metric name/title\n  value: string | number;  // Metric value\n  description: string;     // Additional context/explanation\n}\n</code></pre>"},{"location":"frontend/components/QuickMetricCard/#styling","title":"Styling","text":"<ul> <li>Uses Mantine Paper component for elevation</li> <li>Consistent padding and spacing</li> <li>Color-coded value display</li> <li>Responsive text sizing</li> </ul>"},{"location":"frontend/components/QuickMetricCard/#usage-example","title":"Usage Example","text":"<pre><code>&lt;QuickMetricCard\n  title=\"Total Citations\"\n  value=\"1,234\"\n  description=\"Total number of citations in the last year\"\n/&gt;\n</code></pre>"},{"location":"frontend/components/charts/DoubleBarChart/","title":"Double Bar Chart Component","text":"<p><code>components/charts/DoubleBarChart.tsx</code></p>"},{"location":"frontend/components/charts/DoubleBarChart/#overview","title":"Overview","text":"<p>A responsive bar chart component that visualizes total results and citations side by side over time using Recharts library.</p>"},{"location":"frontend/components/charts/DoubleBarChart/#props-interface","title":"Props Interface","text":"<pre><code>interface TimeSeriesData {\n  year: string | number;     // Label \n  total_results: number;     \n  total_citations: number;  \n}\n\ninterface DoubleBarChartProps {\n  data: TimeSeriesData[];    // Array of time series data points\n  height?: number;           // Optional height of the chart (default: 400)\n}\n</code></pre>"},{"location":"frontend/components/charts/DoubleBarChart/#features","title":"Features","text":"<ul> <li>Responsive container that adapts to parent width</li> <li>Custom tooltip showing detailed information</li> </ul>"},{"location":"frontend/components/charts/DoubleBarChart/#usage-example","title":"Usage Example","text":"<pre><code>import DoubleBarChart from '@/components/charts/DoubleBarChart';\n\nconst MyComponent = () =&gt; {\n  const data = [\n    { year: 2020, total_results: 1500, total_citations: 3000 },\n    { year: 2021, total_results: 1800, total_citations: 3500 },\n    { year: 2022, total_results: 2100, total_citations: 4000 },\n  ];\n\n  return (\n    &lt;DoubleBarChart \n      data={data}\n      height={400}\n    /&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/components/charts/StackedBarChart/","title":"Stacked Bar Chart Documentation","text":"<p><code>components/charts/StackedBarChart.tsx</code></p>"},{"location":"frontend/components/charts/StackedBarChart/#overview","title":"Overview","text":"<p>A responsive stacked bar chart component that visualizes publication types over time, showing the distribution between articles, preprints, and datasets.</p>"},{"location":"frontend/components/charts/StackedBarChart/#features","title":"Features","text":"<ul> <li>Stacked bar visualization</li> <li>Custom tooltips</li> <li>Responsive design</li> <li>Formatted numbers</li> <li>Color-coded categories</li> </ul>"},{"location":"frontend/components/charts/StackedBarChart/#interfaces","title":"Interfaces","text":"<pre><code>interface StackedBarData {\n  year: string | number;\n  articles: number;\n  preprints: number;\n  datasets: number;\n}\n\ninterface StackedBarChartProps {\n  data: StackedBarData[];\n  height?: number;\n}\n</code></pre>"},{"location":"frontend/components/charts/StackedBarChart/#usage-example","title":"Usage Example","text":"<pre><code>&lt;StackedBarChart\n  data={[\n    {\n      year: 2023,\n      articles: 500,\n      preprints: 200,\n      datasets: 100\n    },\n    // ... more data points\n  ]}\n  height={400}\n/&gt;\n</code></pre>"},{"location":"frontend/hooks/getWorksMetricsData/","title":"Works Metrics Hook Documentation","text":"<p><code>hooks/getWorksMetricsData.tsx</code></p>"},{"location":"frontend/hooks/getWorksMetricsData/#overview","title":"Overview","text":"<p>A custom React hook that fetches and manages various research metrics data, including quick metrics from the search result (total citations, total results), data for the stacked bar chart and double bar chart, and count data for funders, publishers, and open access.</p>"},{"location":"frontend/hooks/getWorksMetricsData/#features","title":"Features","text":"<ul> <li>Fetches multiple types of metrics data for the Works page</li> <li>Manages loading states</li> <li>Handles errors</li> <li>Automatic data transformation</li> <li>Type-safe state management</li> </ul>"},{"location":"frontend/hooks/getWorksMetricsData/#hook-interface","title":"Hook Interface","text":"<pre><code>function useMetricsData(filters: WorksFilterState) {\n  return {\n    metrics: WorksMetricsState;\n    loading: {\n      quickMetrics: boolean;\n      visualizations: boolean;\n      groupings: boolean;\n    };\n    error: string | null;\n  };\n}\n</code></pre>"},{"location":"frontend/hooks/getWorksMetricsData/#state-structure","title":"State Structure","text":"<pre><code>const initialMetricsState = {\n  quickMetrics: {\n    totalPapers: 0,\n    totalCitations: 0,\n    averageCitations: 0\n  },\n  visualizationData: {\n    timeSeriesData: [],\n    stackedData: []\n  },\n  groupingsData: {\n    funders: {},\n    publishers: {},\n    openAccess: {}\n  }\n};\n</code></pre>"},{"location":"frontend/hooks/getWorksMetricsData/#api-endpoints","title":"API Endpoints","text":"<ul> <li><code>/works/publications</code> - Quick metrics</li> <li><code>/works/works_metrics</code> - Visualization data</li> <li><code>/works/group_metrics</code> - Grouping statistics</li> </ul>"},{"location":"frontend/hooks/getWorksMetricsData/#usage-example","title":"Usage Example","text":"<pre><code>const MyComponent = () =&gt; {\n  const filters = {\n    // ... filter configuration\n  };\n\n  const { metrics, loading, error } = useMetricsData(filters); \n\n  if (error) return &lt;ErrorComponent message={error} /&gt;;\n  if (loading.quickMetrics) return &lt;LoadingComponent /&gt;;\n\n  return (\n    // Use metrics data\n  );\n};\n</code></pre>"},{"location":"frontend/libs/types/","title":"Types Documentation","text":"<p><code>libs/types.ts</code></p>"},{"location":"frontend/libs/types/#overview","title":"Overview","text":"<p>Central type definitions for the application, defining interfaces for research data, filters, and metrics.</p>"},{"location":"frontend/libs/types/#type-definitions","title":"Type Definitions","text":""},{"location":"frontend/libs/types/#research-interface","title":"Research Interface","text":"<pre><code>interface Research {\n  id: string;\n  title: string;\n  author: string;\n  type: string;\n  date: string;\n  citations: number;\n  department?: string;\n  abstract?: string;\n  keywords?: string[];\n}\n</code></pre>"},{"location":"frontend/libs/types/#works-filter-state","title":"Works Filter State","text":"<pre><code>type WorksFilterState = {\n  dateRange: {\n    from: Date | null;\n    to: Date | null;\n  };\n  search_query: string;\n  type: string[];\n  fields: string[];\n  excludeFields: string[];\n  citationCount: {\n    min: number;\n    max: number | null;\n  };\n  openAccess: boolean;\n  has_doi: boolean;\n  sort: string[];\n  subject: string;\n};\n</code></pre>"},{"location":"frontend/libs/types/#quick-metric-interface","title":"Quick Metric Interface","text":"<pre><code>interface QuickMetric {\n  title: string;\n  value: string | number;\n  description: string;\n}\n</code></pre>"},{"location":"frontend/libs/types/#works-metrics-state","title":"Works Metrics State","text":"<pre><code>interface WorksMetricsState {\n  quickMetrics: {\n    totalPapers: number;\n    totalCitations: number;\n    averageCitations: number;\n  };\n  visualizationData: {\n    timeSeriesData: Array&lt;{\n      year: number;\n      total_results: number;\n      total_citations: number;\n    }&gt;;\n    stackedData: Array&lt;{\n      year: number;\n      articles: number;\n      preprints: number;\n      datasets: number;\n    }&gt;;\n  };\n  groupingsData: {\n    funders: Record&lt;string, number&gt;;\n    publishers: Record&lt;string, number&gt;;\n    openAccess: Record&lt;string, number&gt;;\n  };\n}\n</code></pre>"},{"location":"frontend/libs/types/#usage","title":"Usage","text":"<ul> <li>Import types using: <code>import { TypeName } from '@/libs/types';</code></li> <li>Used throughout the application for type safety</li> <li>Provides centralized type management</li> </ul>"},{"location":"frontend/libs/types/#best-practices","title":"Best Practices","text":"<ul> <li>Keep types DRY (Don't Repeat Yourself)</li> <li>Use strict typing</li> <li>Document complex types</li> <li>Use meaningful naming</li> <li>Keep interfaces focused</li> </ul>"}]}